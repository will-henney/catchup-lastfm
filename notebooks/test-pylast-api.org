* Test the pylast package for accessing last.fm api

Check we can access the API keys
#+begin_src python :return data :results verbatim
  from pathlib import Path
  import toml

  data = toml.loads((Path.cwd().parent / "lib" / "secrets.toml").read_text())
#+end_src

#+RESULTS:
: {'API_USER': 'deprecated', 'API_KEY': '9aed56861b6255ab06cc191ddbd5ecad', 'API_SECRET': 'ac14bf9254c9e34fa1a835ccc464f928'}


And the same for the test account I just made
#+begin_src python :return data :results verbatim
  from pathlib import Path
  import yaml

  data = yaml.safe_load(
      (Path.cwd().parent / "lib" / "test-account-secrets.yaml").read_text()
  )
#+end_src

#+RESULTS:
: {'username': 'test-wjh', 'password_hash': 'a39c48b8acda422202e1127a77ac28ff', 'api_key': '7b2f01c49fd900060b40a4957d7e9016', 'api_secret': '34e77523f870af3adb1360dd3779e92c'}


Test basic API access (based on example in ~pylast~ README)

#+begin_src python
  from pathlib import Path
  import pylast
  import yaml

  secrets = yaml.safe_load(
      (Path.cwd().parent / "lib" / "test-account-secrets.yaml").read_text()
  )

  network = pylast.LastFMNetwork(
      api_key=secrets["api_key"],
      api_secret=secrets["api_secret"],
      username=secrets["username"],
      password_hash=secrets["password_hash"],
  )

  # Now you can use that object everywhere
  track = network.get_track("Blur", "Parklife")
  track.love()
  track.add_tags(("britpop", "90s"))
#+end_src

#+RESULTS:
: None

Yes! That worked. Lithium now appears in my loved tracks list on the website.

* Test scrobbling of tracks from my list

Tricky part here is getting the timestamp in the right format
#+begin_src python :results output 
  from pathlib import Path
  import pylast
  import yaml
  import datetime
  import numpy as np
  import pandas as pd

  secrets = yaml.safe_load(
      (Path.cwd().parent / "lib" / "test-account-secrets.yaml").read_text()
  )

  network = pylast.LastFMNetwork(
      api_key=secrets["api_key"],
      api_secret=secrets["api_secret"],
      username=secrets["username"],
      password_hash=secrets["password_hash"],
  )


  def date_to_timestamp(series):
      """Convert a series of free-format datetimes to Unix timestamps"""
      dt64 = (
          pd.to_datetime(series)
          .dt.tz_localize("America/Mexico_City", ambiguous=True)
          .values
      )
      return dt64.astype(int) // 1_000_000_000

  df = pd.read_csv("../data/will-itunes-library-last-played.csv")
  # Remove spaces from column names
  df.rename(columns=lambda x: x.replace(' ', '_'), inplace=True)
  # Add a new column with the unix timestamps
  df = df.assign(
      timestamp=date_to_timestamp(df.Last_Played)
  )
  for entry in df.iloc[1000:1010].itertuples():
      network.scrobble(
          artist=entry.Artist,
          title=entry.Title,
          timestamp=entry.timestamp,
      )

#+end_src

#+RESULTS:

That has now added a bunch of scrobbled tracks

* Test scrobbling multiple tracks at once
#+begin_src python :results output 
  from pathlib import Path
  import logging
  import pylast
  import yaml
  import datetime
  import numpy as np
  import pandas as pd

  logging.basicConfig(level=logging.DEBUG, filename="scrobble.log")

  secrets = yaml.safe_load(
      (Path.cwd().parent / "lib" / "test-account-secrets.yaml").read_text()
  )

  network = pylast.LastFMNetwork(
      api_key=secrets["api_key"],
      api_secret=secrets["api_secret"],
      username=secrets["username"],
      password_hash=secrets["password_hash"],
  )


  def date_to_timestamp(series):
      """Convert a series of free-format datetimes to Unix timestamps"""
      dt64 = (
          pd.to_datetime(series)
          .dt.tz_localize("America/Mexico_City", ambiguous=True)
          .values
      )
      return dt64.astype(int) // 1_000_000_000

  df = pd.read_csv("../data/will-itunes-library-last-played.csv")
  # Remove spaces from column names and convert to lower case
  df.rename(columns=lambda x: x.replace(' ', '_').lower(), inplace=True)
  # Add a new column with the unix timestamps
  df = df.assign(
      timestamp=date_to_timestamp(df.last_played)
  )
  tracks = (
      df
      .loc[400:500, ["artist", "title", "timestamp"]]
      .to_dict(orient="records")
  )
  network.scrobble_many(tracks)


#+end_src

#+RESULTS:

Hmm, that did a few but it won't do any more

Maybe I have hit a rate limit
